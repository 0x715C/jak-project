;-*-Lisp-*-
(in-package goal)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GOAL Kernel Header File
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CONSTANTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; hardware
(defconstant *scratch-memory-top* (the pointer #x70004000))

;; versions
(defconstant *kernel-major-version* 2)
(defconstant *kernel-minor-version* 0)
(defconstant *irx-major-version* 1)
(defconstant *irx-minor-version* 2)

;; memory
;; the size of the stack
(defconstant DPROCESS_STACK_SIZE #x3800) ;; NOTE - check gkernel.gc before changing!!
;; half of the size of the stack (this might just be a mistake?)
(defconstant PROCESS_STACK_SIZE 7164)
;; default size of stack to backup for a process
(defconstant PROCESS_STACK_SAVE_SIZE 256)
;; the size of the shared heap used by dynamically sized processes
(defconstant PROCESS_HEAP_SIZE (* 984 1024))

;; stuff
(defconstant *tab-size* (the binteger 8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ENUMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; bitfield enum to indicate proprties about a process-tree
(defenum process-mask :bitfield #t :type int32
  (execute         0) ; 1
  (draw            1) ; 2
  (pause           2) ; 4
  (menu            3) ; 8
  (progress        4) ; 16
  (actor-pause     5) ; 32
  (sleep           6) ; 64
  (sleep-code      7) ; 128
  (process-tree    8) ; 256       ; not an actual process, just a "tree node" for organization
  (heap-shrunk     9) ; 512
  (going          10) ; 1024
  (movie          11) ; 2048
  (movie-subject  12) ; 4096
  (target         13) ; 8192
  (sidekick       14) ; 16384
  (crate          15) ; 32768
  (collectable    16) ; 65536
  (enemy          17) ; 131072
  (camera         18) ; 262144
  (platform       19) ; 524288
  (ambient        20) ; 1048576
  (entity         21) ; 2097152
  (projectile     22) ; 4194304
  (attackable     23) ; 8388608
  (death          24) ; 16777216
  )

;; -961
(defconstant PROCESS_CLEAR_MASK
  (lognot (process-mask sleep sleep-code process-tree heap-shrunk)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MACROS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmacro process-mask? (mask enum-value)
  `(!= 0 (logand ,mask (process-mask ,enum-value)))
  )

(defmacro process-mask-set! (mask enum-value)
  ;`(set! ,mask (process-mask ,enum-value))
  `(process-mask ,enum-value)
  )

(defmacro break (message)
  ;"Stop execution with a division by zero."
  `(begin
     (format 0 "BREAK: ~S~%" ,message)
     (/ 0 0)
     )
  )

(defmacro msg-err (&rest args)
  ;"Print a message to the target's stdout immediately!
  ; will not appear in the compiler."
  `(format 0 ,@args)
  )

(defmacro msg-warn (&rest args)
  ;"Same as msg-err, print a message to stdout immediately!"
  `(format 0 ,@args)
  )

(defmacro as-process (ppointer)
  ;"safely dereference a (pointer process), returning #f if invalid."
  `(if ,ppointer
       (-> (-> ,ppointer) self)
       )
  )

(defmacro as-ppointer (proc)
  ;"safely get a (pointer process) from a process, returning #f if invalid."
  `(if ,proc
       (-> ,proc ppointer)
       )
  )

(defmacro process-stack-used (proc)
  ;"Get how much stack the top-thread of a process has used. I added a check to return -1 if there is no thread."
  `(if (-> ,proc top-thread)
        (- (the integer (-> ,proc top-thread stack-top)) (the integer (-> ,proc top-thread sp)))
        -1
        )
  )

(defmacro process-stack-size (proc)
  ;"Get how much stack the top-thread of a process has. I added a check to return -1 if there is no thread."
  `(if (-> ,proc top-thread)
       (-> ,proc top-thread stack-size)
       -1
       )
  )

(defmacro process-heap-used (proc)
  ;"Get how much heap a process has used."
  `(- (-> ,proc allocated-length) (- (the integer (-> ,proc heap-top)) (the integer (-> ,proc heap-cur))))
  )

(defmacro with-pp-as (name &rest body)
  ; "Execute the enclosed code with a variable named `name` containing the process pointer"
  `(rlet ((,name :reg r12 :type process))
         ,@body
         )
  )

(defmacro gsuspend ()
  ; "GOAL Suspend"
  ; the original:
  ; (lwu s6 44 s6) ; load (-> pp top-thread)
  ; (mtlo s6)      ; lo holds the thread
  ; (lwu s6 12 s6) ; s6 holds the suspend hook
  ; (jalr ra s6)   ; call suspend hook
  ; (mflo s6)      ; set s6 to the thread.
  
  ; this version is equivalent to a function call.
  (with-gensyms (pp)
    `(rlet ((,pp :reg r12 :type process))
           ;; set r12 to the thread to suspend
           (set! ,pp (the process (-> ,pp top-thread)))
           ;; call the suspend hook
           ((-> (the cpu-thread ,pp) suspend-hook))
           
           )
    )

  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TYPES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; "process-tree" is defined in C (for an unknown reason).
;; to make sure method ids line up, we have to declare these manually.
;; 9
(declare-method process-tree activate ((obj process-tree) (dest process-tree) (name basic) (stack-top pointer)) basic)
;; 10
(declare-method process-tree deactivate ((obj process-tree)) basic)
;; 11 - ???
(declare-method process-tree dummy-method-11 () none)
;; 12
(declare-method process-tree run-logic? ((obj process-tree)) boolean)
;; 13 - ???
(declare-method process-tree dummy-method-13 () none)

;; this stores the current state of the kernel.
(deftype kernel-context (basic)
  ((prevent-from-run    int32      :offset-assert 0)      ;; actually a process-mask
   (require-for-run     int32      :offset-assert 4)      ;; actually a process-mask, unused?
   (allow-to-run        int32      :offset-assert 8)      ;; actually a process-mask, unused?
   (next-pid            int32      :offset-assert 12)     ;; next PID to give out
   (fast-stack-top      pointer    :offset-assert 16)     ;; scratchpad stack (unused?)
   (current-process     basic      :offset-assert 20)     ;; process?
   (relocating-process  basic      :offset-assert 24)     ;; process?
   (relocating-min      int32      :offset-assert 28)     ;; print hex
   (relocating-max      int32      :offset-assert 32)     ;; print hex
   (relocating-offset   int32      :offset-assert 36)     ;; ?
   (low-memory-message  basic      :offset-assert 40)     ;; boolean?
   )
  )

;; A thread belongs to a process and has a reference to a stack.
;; they have an "actual stack", which is where the stack goes when the thread runs.
;; and also a "backup stack", which stores the stack when the thread doesn't run.
;; this means threads can't leak pointers to stack variables to other threads...
;; optionally, threads may know how to suspend/resume themselves.
(deftype thread (basic)
  ((name          basic    :offset-assert 0)   ;; name of the thread (usually a symbol?)
   (process       process  :offset-assert 4)   ;; process that the thread belongs to
   (previous      thread   :offset-assert 8)   ;; previous thread that was running in the process
   (suspend-hook  basic    :offset-assert 12)  ;; function to suspend this thread
   (resume-hook   basic    :offset-assert 16)  ;; function to resume this thread
   (pc            pointer  :offset-assert 20)  ;; program counter of the thread
   (sp            pointer  :offset-assert 24)  ;; stack pointer of the thread (actual stack)
   (stack-top     pointer  :offset-assert 28)  ;; top of the thread's stack (actual stack)
   (stack-size    int32    :offset-assert 32)  ;; size of the thread's stack (backup stack)
   )
  
  (:methods
    (stack-size-set! ((this thread) (stack-size integer)) none 9)  
    )
  )

;; A CPU thread is a thread which has some memory to save registers and a stack
(deftype cpu-thread (thread)
  ((rreg   uint64 8        :offset-assert 36)   ;; general purpose saved registers
   (freg   float 6         :offset-assert 100)  ;; floating point registers
   (stack  uint8 :dynamic  :offset-assert 124)  ;; stack memory (dynamic array)
   )
  (:methods
    (thread-suspend ((this cpu-thread)) none 10)
    (thread-resume  ((to-resume cpu-thread)) none 11)
    )
  )

;; A dead pool is simply a process-tree node which contains all dead processes.
(deftype dead-pool (process-tree)
  (
   ;; ?? (nothing??)
   )
  (:methods
    (get-process ((pool dead-pool) (type-to-make type) (stack-size integer)) process 14)
    (return-process ((pool dead-pool) (proc process)) process-tree 15)
    )
  )

;; A dead-pool-heap-rec is a record for a process which lives on a dead-pool-heap.
;; these processes can move around, but the records can't.
;; the pointer to the "process" field of this type is used as a "ppointer" - 
;; a reference to the process which remains valid until the process is destroyed.
(deftype dead-pool-heap-rec (structure)
  ((process process         :offset-assert 0) ;; the process of this record
   (prev dead-pool-heap-rec :offset-assert 4) ;; next rec in the linked list
   (next dead-pool-heap-rec :offset-assert 8) ;; prev. rec in the linked list
   )
  )


;; This is a pool of dead processes which can be dynamically sized and allocated from a common heap.
;; Alive processess in a dead-pool-heap can be relocated and compacted to reduce heap fragmentation.
(deftype dead-pool-heap (dead-pool)
  ((allocated-length    int32                           :offset-assert #x1c) ;; size of heap
   (compact-time        uint32                          :offset-assert #x20) ;; ??
   (compact-count-targ  uint32                          :offset-assert #x24) ;; ??
   (compact-count       uint32                          :offset-assert #x28) ;; ??
   (fill-percent        float                           :offset-assert #x2c) ;; ??
   (first-gap           dead-pool-heap-rec              :offset-assert #x30) ;; ??
   (first-shrink        dead-pool-heap-rec              :offset-assert #x34) ;; ??
   (heap                kheap :inline #t                :offset-assert 60)   ;; ??
   (alive-list          dead-pool-heap-rec :inline #t   :offset-assert 76)   ;; ??
   (last                dead-pool-heap-rec :offset #x50 :offset-assert #x50) ;; overlay of (-> alive-list prev)
   (dead-list           dead-pool-heap-rec              :offset-assert 88)   ;; ??
   (process-list        dead-pool-heap-rec :inline #t :dynamic)
   )
  (:methods
    (compact ((this dead-pool-heap) (count integer)) none 16)
    (shrink-heap ((this dead-pool-heap) (proc process)) dead-pool-heap 17)
    (churn ((this dead-pool-heap) (count integer)) none 18)
    (memory-used ((this dead-pool-heap)) integer 19)
    (memory-total ((this dead-pool-heap)) integer 20)
    (gap-size ((this dead-pool-heap) (rec dead-pool-heap-rec)) integer 21)
    (gap-location ((this dead-pool-heap) (rec dead-pool-heap-rec)) pointer 22)
    (find-gap ((this dead-pool-heap) (rec dead-pool-heap-rec)) dead-pool-heap-rec 23)
    (find-gap-by-size ((this dead-pool-heap) (size integer)) dead-pool-heap-rec 24)
    (memory-free ((this dead-pool-heap)) integer 25)
    (compact-time ((this dead-pool-heap)) integer 26)
    )
  )

(deftype catch-frame (stack-frame)
  ((sp int32 :offset-assert 8)
   (ra int32 :offset-assert 12)
   (freg float 6 :offset-assert 16)
   (rreg int64 8 :offset-assert 44)
   )
  )

(deftype protect-frame (stack-frame)
  ((exit (function object) :offset-assert 8))
  )

(deftype handle (uint64)
  ((process (pointer process) :offset-assert 0)
   (pid uint32 :offset-assert 32))
  (:methods
    ; (print ((this handle)) handle 2)
    ; (inspect ((this handle)) handle 3)
    )
  )

(defmethod inspect handle ((this handle))
  (format #t "[~8x] ~A~%" 'handle)
  (format #t "~Tprocess: #x~X~%" (-> this process))
  (format #t "~Tpid: ~D~%" (-> this pid))
  this
  )

(defmethod print handle ((this handle))
  (cond
    ((!= 0 this)
     (format #t "#<handle :process ~A :pid ~D>"
             (if (and (-> this process)                                  ;; ppointer is set
                      (= (-> (-> (-> this process)) pid) (-> this pid))) ;; ppointer matches pid
                 (-> (-> this process))
                 )
             (-> this pid)
             )
     )
    (else
      (format #t "#<handle :process 0 :pid 0>")
      )
    )
  
  this
  )


(deftype state (protect-frame)
  ((code basic :offset-assert 12)
   (trans basic :offset-assert 16)
   (post basic :offset-assert 20)
   (enter basic :offset-assert 24)
   (event basic :offset-assert 28))
  )

;; todo event message block

;; process tree (32 bytes)
;;  type 4
;;  name 8
;;  mask 12
;;  parent 16
;;  brother 20
;;  child 24
;;  ppointer 28
;;  self 32


;; process (112 bytes)
;; type -4
;; name 0
;; mask 4
;; parent 8
;; brother 0xc
;; child 0x10
;; ppointer 0x14
;; self  0x18

;; pool 0x1c
;; status 0x20
;; pid 0x24
;; main-thread 0x28
;; top-thread 0x2c
;; entity 0x30
;; state 0x34
;; trans-hook 0x38
;; post-hook 0x3c
;; event-hook 0x40
;; allocated-length 0x44
;; next-state 0x48
;; heap-base 0x4c
;; heap-top 0x50
;; heap-cur 0x54
;; stack-frame-top 0x58
;; connection-list 0x5c (inline!)
;; stack 0x6c dynamic


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun-extern change-parent ((obj process-tree) (new-parent process-tree)) 
              process-tree)

(defun-extern iterate-process-tree ((obj process-tree) (func (function object object)) (context kernel-context)) 
              basic)

(defun-extern execute-process-tree ((obj process-tree) (func (function object object)) (context kernel-context))
               basic)

(defun-extern search-process-tree ((obj process-tree) (func (function boolean object)))
               basic)

(defun-extern inspect-process-tree ((obj process-tree) (level integer) (mask integer) (detail boolean))
               process-tree)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL VARIABLES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *kernel-sp-lo* integer)           ;; low 32-bits of kernel stack pointer for saved kernel state
(define-extern *kernel-sp-hi* integer)           ;; hi 32-bits of kernel stack pointer
(define-extern *listener-process* process)       ;; process for running listener functions in
(define-extern *debug-dead-pool* dead-pool-heap) ;; dead-pool used in debug mode
(define-extern *null-process* process)           ;; a "nothing" process
(define-extern *active-pool* process-tree)